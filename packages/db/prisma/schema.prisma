generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  STUDENT
  TEACHER
  SCHOOL
  ADMIN
}

model User {
  id            String     @id @default(cuid())
  email         String     @unique
  username      String?    @unique
  name          String?
  password      String?
  semester      Semester[]
  semesterTitle String?
  refresh_token String?
  oauth         Oauth[]
  userType      UserType   @default(STUDENT) // STUDENT, TEACHER, ADMIN
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Oauth {
  id           String  @id @default(cuid())
  provider     String? @unique
  providerId   String?
  accessToken  String?
  refreshToken String?
  user         User?   @relation(fields: [userId], references: [id])
  userId       String?
}

model Semester {
  id        String    @id @default(cuid())
  title     String
  startDate DateTime?
  endDate   DateTime?
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  courses   Course[]

  @@index([userId])
}

model Course {
  id         String   @id @default(cuid())
  title      String
  semesterId String
  semester   Semester @relation(fields: [semesterId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  classes    Class[]

  @@index([semesterId])
}

enum WeekDay {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

model Class {
  id           String       @id @default(cuid())
  title        String
  courseId     String
  course       Course       @relation(fields: [courseId], references: [id])
  startTime    DateTime
  endTime      DateTime
  day          WeekDay
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  instructor   Instructor?  @relation(fields: [instructorId], references: [id])
  instructorId String?
  assignments  Assignment[]

  @@index([courseId])
}

model Instructor {
  id        String   @id @default(cuid())
  name      String
  email     String?
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  classes   Class[]

  @@index([email])
}

model Assignment {
  id          String    @id @default(cuid())
  title       String
  description String?
  dueDate     DateTime?
  classId     String?
  class       Class?    @relation(fields: [classId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
